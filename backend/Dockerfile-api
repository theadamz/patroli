# Node API service
FROM node:lts-bullseye-slim as base

# arguments/variables inside Dockerfile
ARG WORKDIR=$WORKDIR
ARG API_PORT_EXPOSE=$API_PORT_EXPOSE
ARG NODE_ENV=$NODE_ENV

# environment for building node
ENV NODE_ENV=$NODE_ENV

# expose port
EXPOSE $API_PORT_EXPOSE

# set workdir
WORKDIR $WORKDIR

# copy file package.json and lock file
COPY ./package.json .
COPY ./pnpm-lock.yaml .

# install pnpm and depencies dari lock file
RUN npm install -g pnpm && pnpm install --frozen-lockfile

# copy files that we need
COPY . .

############################# DEVELOPMENT STAGE #############################
FROM base as development

# copy and set permission for files
COPY ./entrypoint-api.sh .
RUN chmod +x ./entrypoint-api.sh

# prisma generate
RUN pnpm dlx prisma generate;

# run entrypoint (any other command that we need)
ENTRYPOINT [ "./entrypoint-api.sh" ]

############################# PRODUCTION STAGE #############################
FROM node:lts-bullseye-slim as production

# arguments/variables inside Dockerfile
ARG WORKDIR=$WORKDIR

# set workdir
WORKDIR $WORKDIR

# environment for building node
ENV NODE_ENV=development

# copy file package.json and lock file
COPY ./package.json .
COPY ./pnpm-lock.yaml .

# install pnpm and depencies from lock file
RUN npm install -g pnpm && pnpm install --frozen-lockfile

# copy sources
COPY . .

# build
RUN pnpm run build

# move files from /app/dist folder to /
RUN mv ./dist /

# delete folder /app
RUN rm -rf $WORKDIR

# change workdir
WORKDIR /dist

# environment inside Dockerfile
ENV NODE_ENV=production

# copy file package.json and lock file
COPY ./package.json .
COPY ./pnpm-lock.yaml .

# install dependencies production only
RUN pnpm install --frozen-lockfile --prod

# prisma copy schema
COPY ./src/databases/prisma/schema.prisma ./databases/prisma/schema.prisma

# prisma generate
RUN pnpm dlx prisma generate --schema=./databases/prisma/schema.prisma

# prisma seed (optional)
# RUN node ./databases/prisma/seed.js

# run server
CMD ["node", "server.js"]
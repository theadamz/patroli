// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum platform {
  web
  mobile_officer
  mobile_citizen
}

enum actor {
  operator
  officer
  citizen
}

enum complaint_status {
  menunggu
  proses
  selesai
  tolak
  batal
}

type log {
  message    String
  old_data   Json?
  created_by String?   @db.ObjectId
  created_at DateTime? @default(now())
}

type video_file {
  video_filename      String
  video_filename_hash String
}

type picture_file {
  picture_filename      String
  picture_filename_hash String
}

model menu {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  code        String      @unique
  name        String
  description String?
  is_active   Boolean     @default(true)
  created_by  String?     @db.ObjectId
  updated_by  String?     @db.ObjectId
  created_at  DateTime?   @default(now())
  updated_at  DateTime?
  role_menu   role_menu[]

  @@map("menus")
}

model role {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  code       String      @unique
  name       String
  created_by String?     @db.ObjectId
  updated_by String?     @db.ObjectId
  created_at DateTime?   @default(now())
  updated_at DateTime?
  user       user[]
  role_menu  role_menu[]

  @@map("roles")
}

model role_menu {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  role_id      String?   @db.ObjectId
  role         role?     @relation(fields: [role_id], references: [id])
  menu_id      String    @db.ObjectId
  menu         menu      @relation(fields: [menu_id], references: [id])
  allow_create Boolean   @default(false)
  allow_edit   Boolean   @default(false)
  allow_delete Boolean   @default(false)
  created_by   String?   @db.ObjectId
  updated_by   String?   @db.ObjectId
  created_at   DateTime? @default(now())
  updated_at   DateTime?

  @@unique([role_id, menu_id])
  @@index([role_id])
  @@index([menu_id])
  @@map("role_menus")
}

model user {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  public_id               String    @unique @db.ObjectId
  email                   String    @unique
  password                String
  name                    String
  role_id                 String    @db.ObjectId
  role                    role      @relation(fields: [role_id], references: [id])
  actor                   actor     @default(citizen)
  photo_filename          String?   @default("_blank_photo.png")
  photo_filename_hash     String?   @default("_blank_photo.png")
  is_active               Boolean   @default(true)
  created_by              String?   @db.ObjectId
  updated_by              String?   @db.ObjectId
  created_at              DateTime? @default(now())
  updated_at              DateTime?
  last_change_password_at DateTime?
  officer                 officer[]
  citizen                 citizen[]

  @@map("users")
}

model user_log {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String    @db.ObjectId
  platform   platform
  created_at DateTime? @default(now())

  @@index([platform])
  @@map("users_logs")
}

model user_token {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String    @db.ObjectId
  token      String    @unique
  created_at DateTime? @default(now())

  @@unique([user_id, token])
  @@index([user_id])
  @@map("users_tokens")
}

model officer {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String      @unique @db.ObjectId
  user             user        @relation(fields: [user_id], references: [id])
  code             String      @unique
  name             String
  phone_no         String      @unique
  email            String      @unique
  rating           Float       @default(0)
  last_coordinates Float[]     @default([0, 0])
  is_active        Boolean     @default(true)
  created_by       String?     @db.ObjectId
  updated_by       String?     @db.ObjectId
  created_at       DateTime?   @default(now())
  updated_at       DateTime?
  complaint        complaint[]

  @@map("officers")
}

model officer_team {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  code              String    @unique
  name              String
  is_active         Boolean   @default(true)
  leader_officer_id String    @db.ObjectId
  officer_ids       String[]  @db.ObjectId
  created_by        String?   @db.ObjectId
  updated_by        String?   @db.ObjectId
  created_at        DateTime? @default(now())
  updated_at        DateTime?

  @@map("officers_teams")
}

model citizen {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String      @unique @db.ObjectId
  user             user        @relation(fields: [user_id], references: [id])
  id_card_number   String      @unique // nomor KTP
  name             String
  phone_no         String      @unique
  email            String      @unique
  last_coordinates Float[]     @default([0, 0])
  is_active        Boolean     @default(true)
  created_by       String?     @db.ObjectId
  updated_by       String?     @db.ObjectId
  created_at       DateTime?   @default(now())
  updated_at       DateTime?
  complaint        complaint[]

  @@map("citizens")
}

model complaint_category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  is_visible Boolean     @default(true)
  created_by String?     @db.ObjectId
  updated_by String?     @db.ObjectId
  created_at DateTime?   @default(now())
  updated_at DateTime?
  complaint  complaint[]

  @@map("complaint_categories")
}

model complaint {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  doc_no                String             @unique
  doc_date              DateTime           @db.Date
  complaint_category_id String             @db.ObjectId
  complaint_category    complaint_category @relation(fields: [complaint_category_id], references: [id])
  citizen_id            String             @db.ObjectId
  citizen               citizen            @relation(fields: [citizen_id], references: [id])
  officer_id            String?            @db.ObjectId
  officer               officer?           @relation(fields: [officer_id], references: [id])
  description           String
  video                 video_file?
  pictures              picture_file[]
  status                complaint_status   @default(menunggu)
  reason                String?
  rating                Float              @default(0)
  coordinates           Float[]
  logs                  log[]
  created_by            String?            @db.ObjectId
  updated_by            String?            @db.ObjectId
  created_at            DateTime?          @default(now())
  updated_at            DateTime?

  @@index([citizen_id])
  @@index([officer_id])
  @@map("complaints")
}
